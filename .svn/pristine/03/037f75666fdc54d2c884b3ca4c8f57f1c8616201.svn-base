<template>
  <div id="app">

    <!-- 页面主题框架 -->
    <MainPage ref="MainPage" :ActiveIndex="null" :MenuActiveIndex="[null, null]" @GetUserInfoChange="GetUserInfoChange" @LoginEnd="LoginEnd">
      <div v-if="MediaInfo !== null && MediaInfo.video !== null">
        <!-- 播放器区域 -->
        <div class="PlayerContainer flex-h" :class="{'IsFullWindow': IsFullWindow}">

          <!-- 播放器 -->
          <div class="flex-item" :class="{'IsFullWindow': IsFullWindow}">
            <div class="PlayerBorder" :class="{'IsFullWindow': IsFullWindow}">
              <div>
                <div class="ActiveBorder" :class="{'active': IsMini && MiniLock, 'IsFullWindow': IsFullWindow}" @click.stop="PlayerFocus = true">
                  <div :class="{'IsFullWindow': IsFullWindow}">
                    <div>
                      <HeyPornPlayer :class="{'mini': IsMini && MiniLock}" v-if="MediaSrcList.length && CapacityActiveIndex !== null" :OnFocus="PlayerFocus" :activeIndex="CapacityActiveIndex" :srcList="MediaSrcList" :FrontPath="MediaInfo.video.videoPath" @TriggerFullWindow="TriggerFullWindow" :IsFullWindow="IsFullWindow" @ExitMini="ExitMini" @PlayerReady="PlayerReady" @Next="NextMedia"></HeyPornPlayer>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <i></i>
              <span>Album Viewed {{MediaInfo !== null ? MediaInfo.video.playNum : null}} Times</span>
              <a class="iconfont iconfenxiang"></a>
              <span>Share</span>
            </div>
          </div>

          <!-- 播放列表推荐区域 -->
          <div class="PlayerRecommendList" v-show="!IsFullWindow">
            <PlayerRecommendList @NeedLogin="$refs.MainPage.ToLogin()" :list="(VideoRecommendList || []).slice(0, 10)"></PlayerRecommendList>
          </div>
        </div>

        <div class="Container">

          <!-- 视频信息 -->
          <div class="PlayerMediaInfo">
            <PlayerMediaInfo></PlayerMediaInfo>
          </div>

          <!-- 更多信息 -->
          <div class="MoreMediaInfo flex-h">
            <div class="Left flex-item">
              <div>

                <!-- 演职员表 -->
                <div class="ActorList">
                  <ActorList></ActorList>
                </div>

                <!-- 推荐列表 -->
                <div class="TipList" v-if="(VideoRecommendList || []).slice(10, 18).length">
                  <TipList name="Recommended For You" :more="true" :list="(VideoRecommendList || []).slice(10, 18)"></TipList>
                </div>

                <!-- 评论 -->
                <div class="PlayerComment">
                  <PlayerComment @ToLogin="$refs.MainPage.ToLogin()"></PlayerComment>
                </div>

                <!-- 推荐列表 -->
                <div class="TipList" v-if="(VideoRecommendList || []).slice(18, 26).length">
                  <TipList name="Recommended For You" :more="true" :list="(VideoRecommendList || []).slice(18, 26)"></TipList>
                </div>

                <!-- 推荐列表 -->
                <div class="TipList" v-if="(VideoRecommendList || []).slice(26, 34).length">
                  <TipList name="Recommended For You" :more="true" :list="(VideoRecommendList || []).slice(26, 34)"></TipList>
                </div>
              </div>
            </div>

            <div class="Right">
              <RecommendListY name="Hot List" :more="true" :list="HotVideoListForDay"></RecommendListY>
            </div>
          </div>
        </div>
      </div>
    </MainPage>

    <!-- 网速测试 -->
    <NetworkSpeedTest @load="NetworkSpeed"></NetworkSpeedTest>
  </div>
</template>

<script>
import MainPage from '../../components/MainPage'
import NetworkSpeedTest from '../../components/NetworkSpeedTest'
import HeyPornPlayer from '../../components/HeyPornPlayer'
import PlayerRecommendList from '../../components/PlayerRecommendList'
import PlayerMediaInfo from '../../components/PlayerMediaInfo'
import ActorList from '../../components/ActorList'
import TipList from '../../components/TipList'
import PlayerComment from '../../components/PlayerComment'
import RecommendListY from '../../components/RecommendListY'
import { createNamespacedHelpers } from 'vuex'
const { mapState: mapUserState } = createNamespacedHelpers('user')
const { mapState: mapMediaState, mapActions: mapMediaActions } = createNamespacedHelpers('media')

export default {
  components: {
    MainPage,
    NetworkSpeedTest,
    HeyPornPlayer,
    PlayerRecommendList,
    PlayerMediaInfo,
    ActorList,
    TipList,
    PlayerComment,
    RecommendListY
  },
  data () {
    return {
      MediaSrcList: [], // 视频链接数据
      CapacityActiveIndex: null, // 适配清晰度索引值
      CurrentCapacity: null, // 当前适配清晰度
      IsFullWindow: false, // 全窗口模式状态
      CurrentNetSpeed: null, // 当前网速（粗略值）
      Left: document.body.clientWidth - 500,
      Top: document.body.clientHeight - 281,
      MiniLock: true,
      PlayerFocus: false, // 播放器获得焦点状态
      IsMini: false // mini模式
    }
  },
  computed: {
    ...mapUserState({
      UserInfo: x => x.UserInfo // 用户信息
    }),
    ...mapMediaState({
      MediaInfo: x => x.MediaInfo, // 视频信息
      VideoRecommendList: x => x.VideoRecommendList, // 推荐视频列表
      HotVideoListForDay: x => x.HotVideoListForDay // 视频日排行
    })
  },
  created () {
    this.ToolClass.WindowClick(() => {
      this.PlayerFocus = false
    })
  },
  mounted () {
    this.$nextTick(() => {
    })
  },
  methods: {
    ...mapMediaActions([
      'GetMediaInfoById',
      'GetVideoRecommend',
      'GetHotVideoListForDay'
    ]),
    NextMedia () { // 下一个视频
      if (this.VideoRecommendList.length) {
        window.location.href = `./media.html?pid=${this.VideoRecommendList[0].videoId}`
      }
    },
    UpDatePlayerOptions () { // 同步播放器参数
      if (this.UserInfo !== null) { // 已登录
      } else { // 未登录
      }
    },
    PlayerReady () { // 播放器初始化成功
      let App = document.getElementById('app')
      App.onscroll = () => {
        if (App.scrollTop < 550) {
          this.MiniLock = true
        }
        this.IsMini = App.scrollTop >= 550
      }
      let MiniDrag = document.getElementsByClassName('MiniDrag')[0]
      let StartX = 0
      let StartY = 0
      let MoveX = 0
      let MoveY = 0
      if (MiniDrag) {
        MiniDrag.onmousedown = (e) => {
          StartX = e.clientX
          StartY = e.clientY
          MiniDrag.onmousemove = (e) => {
            MoveX = e.clientX
            MoveY = e.clientY
            console.log(MoveX - StartX, MoveY - StartY)
          }
          MiniDrag.onmouseup = () => {
            MiniDrag.onmousemove = null
          }
        }
      }
    },
    ExitMini () { // 退出mini模式
      this.MiniLock = false
      this.IsMini = false
    },
    LoginEnd () {
      this.GetMediaInfoById({
        id: this.ToolClass.GetUrlParams('pid'),
        params: { accountId: this.UserInfo !== null ? this.UserInfo.id : null }
      }).then(() => {
        if (this.MediaInfo.video === null) {
          window.location.assign(`./error.html`)
        }
      })
      this.GetHotVideoListForDay()
      this.ToGetVideoRecommend()
      this.UpDatePlayerOptions() // 同步播放器参数
    },
    ToGetVideoRecommend () {
      let Params = {
        pageNum: 1,
        pageSize: 40,
        videoId: this.ToolClass.GetUrlParams('pid')
      }
      if (this.UserInfo !== null) {
        Params.accountId = this.UserInfo.id
      }
      this.GetVideoRecommend({ ...Params })
    },
    TriggerFullWindow () { // 切换全窗口模式
      this.IsFullWindow = !this.IsFullWindow
      // if (this.VideoMini && !this.IsFullWindow) {
      //   document.getElementsByClassName('videoContent')[0].style.left = this.Left + 'px'
      //   document.getElementsByClassName('videoContent')[0].style.top = this.Top + 'px'
      // } else {
      //   document.getElementsByClassName('videoContent')[0].style.left = null
      //   document.getElementsByClassName('videoContent')[0].style.top = null
      // }
    },
    GetUserInfoChange () { // 用户登录逻辑完毕
      this.UpDatePlayerOptions() // 同步播放器参数
      this.GetMediaInfoById({
        id: this.ToolClass.GetUrlParams('pid'),
        params: { accountId: this.UserInfo !== null ? this.UserInfo.id : null }
      }).then(() => {
        if (this.MediaInfo !== null && this.MediaInfo.video !== null) {
          let Arr = []
          for (let n in JSON.parse(this.MediaInfo.video.capacity)) {
            if (JSON.parse(this.MediaInfo.video.capacity)[n] - 0) {
              Arr.push({
                src: `${this.MediaInfo.video.videoPath}${n}/index.m3u8`,
                id: n,
                value: n - 0 === 1 ? '360P' : n - 0 === 2 ? '576P' : n - 0 === 4 ? '720P' : n - 0 === 8 ? '1080P' : n - 0 === 16 ? '4K' : '-P'
              })
            }
          }
          if (this.CurrentNetSpeed !== null) { // 清晰度适配
            this.CurrentCapacity = this.MatchingCapacity(JSON.parse(this.MediaInfo.video.capacity), this.CurrentNetSpeed)
            if (this.CapacityActiveIndex === null) {
              Arr.map((item, index) => { // 默认清晰度索引
                if (item.id - 0 === this.CurrentCapacity - 0) {
                  this.CapacityActiveIndex = index
                }
              })
            }
          }
          // if (this.CapacityActiveIndex === null) {
          //   this.CapacityActiveIndex = 0
          // }
          this.MediaSrcList = Arr
        } else {
          window.location.assign(`./error.html`)
        }
      })
      this.GetHotVideoListForDay()
      this.ToGetVideoRecommend()
    },
    MatchingCapacity (target, speed) { // 匹配清晰度
      let CurrentCapacity = 4 // 默认 720p
      let CurrentIndex = 0
      let Arr = []
      if (speed <= 70) { // 360p
        CurrentCapacity = 1
        CurrentIndex = 0
      } else if (speed > 70 && speed <= 179) { // 576p
        CurrentCapacity = 2
        CurrentIndex = 1
      } else if (speed > 179 && speed <= 280) { // 720p
        CurrentCapacity = 4
        CurrentIndex = 2
      } else if (speed > 280) { // 1080p
        CurrentCapacity = 8
        CurrentIndex = 3
      }
      if (target[`${CurrentCapacity}`] - 0 === 0) { // 匹配清晰度无资源，取最佳清晰度
        for (let n in target) {
          Arr.push({ name: n, value: target[n] })
        }
        for (let n = CurrentIndex; n >= 0; n--) {
          if (Arr[n].value - 0) {
            return Arr[n].name
          }
        }
      }
      return CurrentCapacity
    },
    NetworkSpeed (e) { // 网速测试结束回调
      this.CurrentNetSpeed = e
      if (this.MediaInfo !== null && this.MediaInfo.video !== null && this.CurrentCapacity === null) {
        this.CurrentCapacity = this.MatchingCapacity(JSON.parse(this.MediaInfo.video.capacity), this.CurrentNetSpeed)
        if (this.MediaSrcList.length && this.CapacityActiveIndex === null) {
          this.MediaSrcList.map((item, index) => { // 默认清晰度索引
            if (item.id - 0 === this.CurrentCapacity - 0) {
              this.CapacityActiveIndex = index
            }
          })
          if (this.CapacityActiveIndex === null) {
            this.CapacityActiveIndex = 0
          }
        }
      }
    }
  }
}
</script>

<style lang="scss" scoped>
@import 'page.scss';
</style>
